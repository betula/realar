
# memory struct
# 0 index - length (push, pop)

func arr_create result
  id = mem_alloc(32)  # Array default memory size block 32 -> 31 elements
  arr_clear(id)
  id

func arr_len_ptr(id) result
  [id]

func arr_data_ptr(id) result
  [id] + 1

func arr_len(id) result
  [arr_len_ptr(id)] # length

func arr_clear(id)
  [arr_len_ptr(id)] = 0 # length

func arr_len_inc(id)
  # log_2(20, id)
  # log_mem_map()
  len_ptr = arr_len_ptr(id)
  len = [len_ptr]
  # log_4(4445, mem_size(id), len, id)
  if len == mem_size(id) - 1 # substract length
    # log_1(21)
    # log_mem_map()
    mem_x4(id)
    # log_1(22)
    # log_mem_map()
    len_ptr = arr_len_ptr(id)

  [len_ptr] = len + 1
  # log_1(23)
  # log_mem_map()

func arr_len_dec(id)
  len_ptr = arr_len_ptr(id)
  [len_ptr] = [len_ptr] - 1

func arr_push(id n)
  len = arr_len(id)

  # log_4(43, id, n, len)
  # if !is_map_valid(mem_map)
  #   log_m_6("if !is_map_valid mem_map id,n,len,mem_map,mem_map:keys,mem_map:values", id, n, len, mem_map, map_keys(mem_map), map_values(mem_map))
  #   log_mem_map()
    # log_map_of_arr(mem_map)
  # log_mem_map()

  arr_len_inc(id)

  # log_1(44)
  # log_mem_map()

  [arr_data_ptr(id) + len] = n

func arr_pop(id) result
  len = arr_len(id)
  if !len
    res = 0
  else
    res = [arr_data_ptr(id) + len - 1]
    arr_len_dec(id)
  res

func arr_delete(id index)
  len = arr_len(id)
  if index < len
    if index < len - 1
      data_ptr = arr_data_ptr(id)
      mem_copy(data_ptr + index, data_ptr + index + 1, len - index - 1)
    arr_len_dec(id)

func arr_get(id index) result
  len = arr_len(id)
  if index < len
    res = [arr_data_ptr(id) + index]
  else
    res = 0
  res

func arr_set(id index n)
  len = arr_len(id)
  if index < len
    [arr_data_ptr(id) + index] = n

func arr_insert(id index n)
  len = arr_len(id)
  if index < len
    arr_len_inc(id)
    offset = arr_data_ptr(id) + index
    mem_copy(offset + 1, offset, len - index)
    [offset] = n

func arr_free(id)
  mem_free(id)

## <debug>
export arr_create arr_len arr_push arr_pop arr_delete arr_free arr_data_ptr
## </debug>
