
func mem_alloc(size) result
  local ptr size_ptr

  if mem_has_free_place(size)
    ptr = mem_alloc_free_place(size)
  else
    size_ptr = mem_tail_n_inc(1)
    [size_ptr] = size             # 0 n - size of memory block
    ptr = mem_tail_n_inc(size)    # 1 n - pointer to start free memory block

  ptr # result

func mem_size(ptr) result
  [ptr - 1] # previous n before memory pointer

func mem_free(ptr)

func mem_x2(ptr) result
  0

func mem_x4(ptr) result
  0

func mem_has_free_place(size) result
  local res map
  map = mem_map()
  if !map # beginning phase
    res = 0
  else
    res = 0
  res

func mem_alloc_free_place(size) result
  0

func mem_map result
  [[MEM]] # zero index pointer in memory block - map of sizes -> pointers

func mem_init
  local mem_ptr
  mem_ptr = mem_tail_n_inc(1)
  [MEM] = mem_ptr
  [mem_ptr] = 0 # map_create() # Map of free memory block. size => [ptr, ...]
