global mem_map

func mem_alloc(size) result
  ptr = mem_alloc_block(2)
  [ptr] = mem_alloc_block(size) # 0 index - memory block
  [mem_size_ptr(ptr)] = size    # 1 index - size of memory block
  log_3(123, size, ptr)
  log_mem_map()
  ptr

func mem_size_ptr(ptr) result
  ptr + 1

func mem_size(ptr) result
  [mem_size_ptr(ptr)] # size

func mem_free(ptr)
  # if slice_deps == 5399
  #   log_set(slice_deps)

  mem_free_block([ptr], mem_size(ptr)) # We have two piece of memory 2 and size

  # if slice_deps == 5399
  #   log_set(slice_deps)

  mem_free_block(ptr, 2)

  # if slice_deps == 5399
  #   log_2(11111, ptr)
  #   log_set(slice_deps)


func mem_free_block(ptr size)
  # if slice_deps == 5399 && size == 2
  #   log_1(776)
  #   log_set(slice_deps)

  log_3(1, ptr, size)
  log_mem_map()

  if !map_has(mem_map, size)

    # if slice_deps == 5399 && size == 2
    #   log_1(788)
    #   log_set(slice_deps)

    arr = arr_create()

    # LOG MARK
    if slice_deps == 5399 && size == 2 && ptr == 5433
      log_1(100)
      log_set(slice_deps)
      # log_map(mem_map)

    map_set(mem_map, size, arr) # Array of pointers on each block

    # LOG MARK
    if slice_deps == 5399 && size == 2 && ptr == 5433
      log_1(200)
      log_set(slice_deps)
      # log_map(mem_map)

    log_mem_map()

  # if slice_deps == 5399 && size == 2
  #   log_1(777)
  #   log_set(slice_deps)

  arr_push(map_get(mem_map, size), ptr)

  log_mem_map()

  # log_3(2, ptr, size)
  # log_map(mem_map)


func mem_alloc_block(size) result
  log_2(5, size)
  log_mem_map()
  if mem_has_free_place(size)
    ptr = mem_alloc_free_place(size)
    log_3(6, size, ptr)
    log_mem_map()
  else
    ptr = mem_tail_n_inc(size)
    log_3(7, size, ptr)
    log_mem_map()
  ptr


func mem_x4(ptr)
  s = mem_size(ptr)
  s4 = s << 2
  m4 = mem_alloc_block(s4)
  m1 = [ptr]
  mem_copy(m4, m1, s)
  mem_free_block(m1, s)
  [ptr] = m4
  [mem_size_ptr(ptr)] = s4


func mem_non_copy_resize(ptr new_size)
  prev_size = mem_size(ptr)
  new_mem_block = mem_alloc_block(new_size)
  prev_mem_block = [ptr]
  mem_free_block(prev_mem_block, prev_size)
  [ptr] = new_mem_block
  [mem_size_ptr(ptr)] = new_size

func mem_has_free_place(size) result
  if !mem_map # beginning phase
    res = 0
  else
    log_2(15, size)
    log_mem_map()
    if !map_has(mem_map, size)
      res = 0
      log_2(16, size)
      log_mem_map()
    else
      res = arr_len(map_get(mem_map, size))
      log_2(17, size)
      log_mem_map()
  res

func mem_alloc_free_place(size) result
  ptrs = map_get(mem_map, size)
  arr_pop(ptrs)

func mem_init
  # Map of free memory blocks. size => [ptr, ...]
  mem_map = 0 # init null
  mem_map = map_create()

  # log_mem_map()

## <debug>
func get_mem_map result
  mem_map
## </debug>

## <debug>
export mem_alloc mem_size mem_free mem_x4 get_mem_map
## </debug>
