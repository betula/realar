## define TICK_DEEP_LIMIT 100
## define DIGEST_LOOP_LIMIT 100

global tick_deep tick_changed
global slice_deps_stack slice_deps slice_current_id
global box_deps box_rels box_invalid box_expr box_expr_stack

func box_init
  tick_deep = 0
  tick_changed = set_create()
  slice_deps_stack = arr_create()
  slice_deps = 0
  slice_current_id = 0
  box_deps = map_create()
  box_rels = map_create()
  box_invalid = set_create()
  box_expr = set_create()
  box_expr_stack = arr_create()
  box_entry_id = 0
  box_entry_stack = arr_create()

func tick_deep_inc
  tick_deep = tick_deep + 1

func tick_deep_dec
  tick_deep = tick_deep - 1

func tick_start
  if !tick_deep
    set_clear(tick_changed)

  tick_deep_inc()

  if tick_deep > TICK_DEEP_LIMIT
    error(TICK_DEEP_LIMIT_EXCEPTION)

func box_deep_invalidate(changed_set)
  next_set = set_create()
  cur_set = set_create()

  set_assign(cur_set, changed_set)

  loop $loop
    for x of set cur_set
      rels = map_get(box_rels, x)
      if rels
        for r of set rels
          set_add(box_invalid, r)
          set_add(next_set, r)

    if set_size(next_set)
      t = cur_set
      cur_set = next_set
      next_set = t
      set_clear(next_set)

      br $loop

  set_free(next_set)
  set_free(cur_set)


func tick_finish
  if tick_deep > 1 || !set_size(tick_changed)
    tick_deep_dec()
    return

  limit = DIGEST_LOOP_LIMIT
  loop $loop
    limit = limit - 1
    if limit
      box_deep_invalidate(tick_changed)
      set_clear(tick_changed)

      for x of set box_invalid
        if set_has(box_expr, x)
          call(x)

      if set_size(tick_changed)
        br $loop

  tick_deep_dec()
  if !limit
    error(DIGEST_LOOP_LIMIT_EXCEPTION)

func box_create result
  seq_next()


func slice_deps_globals_push
  arr_push(slice_deps_stack, slice_deps)
  arr_push(slice_deps_stack, slice_current_id)

func slice_deps_globals_pop
  slice_current_id = arr_pop(slice_deps_stack)
  slice_deps = arr_pop(slice_deps_stack)


func slice_deps_open(id)
  slice_deps_globals_push()
  slice_deps = set_create()
  slice_current_id = id

func slice_deps_close
  set_delete(box_invalid, slice_current_id)

  prev_deps = map_get(box_deps, slice_current_id)
  if prev_deps
    set_free(prev_deps) # TODO: remove rels from prev_deps (need to find diff between prev and new)
  map_set(box_deps, slice_current_id, slice_deps)

  for d of set slice_deps
    rels = map_get(box_rels, d)
    if !rels
      rels = set_create()
      map_set(box_rels, d, rels)
    set_add(rels, slice_current_id)

  slice_deps_globals_pop()


func box_value_create result
  box_create()

func box_value_get_phase(id)
  if slice_deps
    set_add(slice_deps, id)

func box_value_set_phase(id)
  no_tick = !tick_deep
  if no_tick
    tick_start()
  set_add(tick_changed, id)
  if no_tick
    tick_finish()


func box_expr_create result
  id = box_create()
  set_add(box_expr, id)
  id

func box_expr_start(id)
  slice_deps_open(id)

  no_tick = !tick_deep
  if no_tick
    tick_start()
  arr_push(box_expr_stack, no_tick)


func box_expr_finish
  no_tick = arr_pop(box_expr_stack)
  if no_tick
    tick_finish()

  slice_deps_close()


func box_computed_create result
  id = box_create()
  set_add(box_invalid, id)
  id

func box_computed_start(id) result
  box_value_get_phase(id)
  !set_has(box_invalid, id)

func box_computed_finish
  slice_deps_close()


func box_entry_start
  if !box_entry_id
    box_entry_id = box_create()

  slice_deps_globals_push()
  slice_deps = 0 # No need to collect deps in entry phase
  slice_current_id = box_entry_id

  no_tick = !tick_deep
  if no_tick
    tick_start()
  arr_push(box_entry_stack, no_tick)

func box_entry_finish
  no_tick = arr_pop(box_entry_stack)
  if no_tick
    tick_finish()

  slice_deps_globals_pop()



func box_view_create result
  0

func box_view_start(id)

func box_view_finish


(export "b0" (func $box_value_create))
(export "b1" (func $box_value_get_phase))
(export "b2" (func $box_value_set_phase))
(export "b3" (func $box_expr_create))
(export "b4" (func $box_expr_start))
(export "b5" (func $box_expr_finish))
(export "b6" (func $box_computed_create))
(export "b7" (func $box_computed_start))
(export "b8" (func $box_computed_finish))
(export "b9" (func $box_entry_start))
(export "ba" (func $box_entry_finish))
(export "bb" (func $box_view_create))
(export "bc" (func $box_view_start))
(export "bd" (func $box_view_finish))

## <debug>
func get_tick_deep result
  tick_deep

func get_tick_changed result
  tick_changed

func get_box_deps result
  box_deps

func get_box_rels result
  box_rels

func get_box_invalid result
  box_invalid

func get_box_expr result
  box_expr
## </debug>

## <debug>
export get_box_rels get_box_invalid get_box_expr box_deep_invalidate
export get_tick_changed get_tick_deep tick_deep_inc tick_deep_dec tick_start tick_finish
## </debug>
